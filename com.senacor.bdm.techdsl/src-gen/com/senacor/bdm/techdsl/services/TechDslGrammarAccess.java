/*
 * generated by Xtext 2.25.0
 */
package com.senacor.bdm.techdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TechDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class LogDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.senacor.bdm.techdsl.TechDsl.LogDocument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogDocumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLogDocumentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cBaseentitiesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cBaseentitiesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cBaseentitiesBaseEntityParserRuleCall_4_2_0 = (RuleCall)cBaseentitiesAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cBaseentitiesAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cBaseentitiesBaseEntityParserRuleCall_4_3_1_0 = (RuleCall)cBaseentitiesAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LogDocument returns LogDocument:
		//    {LogDocument}
		//    'LogDocument'
		//    name=EString
		//    '{'
		//        ('baseentities' '{' baseentities+=BaseEntity ( "," baseentities+=BaseEntity)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{LogDocument}
		//'LogDocument'
		//name=EString
		//'{'
		//    ('baseentities' '{' baseentities+=BaseEntity ( "," baseentities+=BaseEntity)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{LogDocument}
		public Action getLogDocumentAction_0() { return cLogDocumentAction_0; }
		
		//'LogDocument'
		public Keyword getLogDocumentKeyword_1() { return cLogDocumentKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('baseentities' '{' baseentities+=BaseEntity ( "," baseentities+=BaseEntity)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'baseentities'
		public Keyword getBaseentitiesKeyword_4_0() { return cBaseentitiesKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//baseentities+=BaseEntity
		public Assignment getBaseentitiesAssignment_4_2() { return cBaseentitiesAssignment_4_2; }
		
		//BaseEntity
		public RuleCall getBaseentitiesBaseEntityParserRuleCall_4_2_0() { return cBaseentitiesBaseEntityParserRuleCall_4_2_0; }
		
		//( "," baseentities+=BaseEntity)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//baseentities+=BaseEntity
		public Assignment getBaseentitiesAssignment_4_3_1() { return cBaseentitiesAssignment_4_3_1; }
		
		//BaseEntity
		public RuleCall getBaseentitiesBaseEntityParserRuleCall_4_3_1_0() { return cBaseentitiesBaseEntityParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.senacor.bdm.techdsl.TechDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class BaseEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.senacor.bdm.techdsl.TechDsl.BaseEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBaseEntityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBaseEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//BaseEntity returns BaseEntity:
		//    {BaseEntity}
		//    'BaseEntity'
		//    name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{BaseEntity}
		//'BaseEntity'
		//name=EString
		public Group getGroup() { return cGroup; }
		
		//{BaseEntity}
		public Action getBaseEntityAction_0() { return cBaseEntityAction_0; }
		
		//'BaseEntity'
		public Keyword getBaseEntityKeyword_1() { return cBaseEntityKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	
	
	private final LogDocumentElements pLogDocument;
	private final EStringElements pEString;
	private final BaseEntityElements pBaseEntity;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TechDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLogDocument = new LogDocumentElements();
		this.pEString = new EStringElements();
		this.pBaseEntity = new BaseEntityElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.senacor.bdm.techdsl.TechDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//LogDocument returns LogDocument:
	//    {LogDocument}
	//    'LogDocument'
	//    name=EString
	//    '{'
	//        ('baseentities' '{' baseentities+=BaseEntity ( "," baseentities+=BaseEntity)* '}' )?
	//    '}';
	public LogDocumentElements getLogDocumentAccess() {
		return pLogDocument;
	}
	
	public ParserRule getLogDocumentRule() {
		return getLogDocumentAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//BaseEntity returns BaseEntity:
	//    {BaseEntity}
	//    'BaseEntity'
	//    name=EString;
	public BaseEntityElements getBaseEntityAccess() {
		return pBaseEntity;
	}
	
	public ParserRule getBaseEntityRule() {
		return getBaseEntityAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
