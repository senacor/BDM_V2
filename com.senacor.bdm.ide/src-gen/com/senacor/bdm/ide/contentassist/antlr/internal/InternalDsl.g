/*
 * generated by Xtext 2.25.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package com.senacor.bdm.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.senacor.bdm.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.senacor.bdm.services.DslGrammarAccess;

}
@parser::members {
	private DslGrammarAccess grammarAccess;

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDocument
entryRuleDocument
:
{ before(grammarAccess.getDocumentRule()); }
	 ruleDocument
{ after(grammarAccess.getDocumentRule()); } 
	 EOF 
;

// Rule Document
ruleDocument 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDocumentAccess().getGroup()); }
		(rule__Document__Group__0)
		{ after(grammarAccess.getDocumentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBaseEntity
entryRuleBaseEntity
:
{ before(grammarAccess.getBaseEntityRule()); }
	 ruleBaseEntity
{ after(grammarAccess.getBaseEntityRule()); } 
	 EOF 
;

// Rule BaseEntity
ruleBaseEntity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBaseEntityAccess().getGroup()); }
		(rule__BaseEntity__Group__0)
		{ after(grammarAccess.getBaseEntityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Document__Group__0__Impl
	rule__Document__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDocumentAccess().getDocumentAction_0()); }
	()
	{ after(grammarAccess.getDocumentAccess().getDocumentAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Document__Group__1__Impl
	rule__Document__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDocumentAccess().getPackageKeyword_1()); }
	'package'
	{ after(grammarAccess.getDocumentAccess().getPackageKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Document__Group__2__Impl
	rule__Document__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDocumentAccess().getNameAssignment_2()); }
	(rule__Document__NameAssignment_2)
	{ after(grammarAccess.getDocumentAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Document__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDocumentAccess().getBaseentitiesAssignment_3()); }
	(rule__Document__BaseentitiesAssignment_3)
	{ after(grammarAccess.getDocumentAccess().getBaseentitiesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BaseEntity__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseEntity__Group__0__Impl
	rule__BaseEntity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseEntity__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseEntityAccess().getBaseEntityAction_0()); }
	()
	{ after(grammarAccess.getBaseEntityAccess().getBaseEntityAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseEntity__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseEntity__Group__1__Impl
	rule__BaseEntity__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseEntity__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseEntityAccess().getBaseEntityKeyword_1()); }
	'BaseEntity'
	{ after(grammarAccess.getBaseEntityAccess().getBaseEntityKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseEntity__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseEntity__Group__2__Impl
	rule__BaseEntity__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseEntity__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseEntityAccess().getNameAssignment_2()); }
	(rule__BaseEntity__NameAssignment_2)
	{ after(grammarAccess.getBaseEntityAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseEntity__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseEntity__Group__3__Impl
	rule__BaseEntity__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseEntity__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseEntityAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getBaseEntityAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseEntity__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseEntity__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseEntity__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseEntityAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getBaseEntityAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getGroup_0()); }
	(rule__QualifiedName__Group_0__0)*
	{ after(grammarAccess.getQualifiedNameAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_0__0__Impl
	rule__QualifiedName__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0_0()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_0_1()); }
	'.'
	{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Document__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDocumentAccess().getNameQualifiedNameParserRuleCall_2_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getDocumentAccess().getNameQualifiedNameParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__BaseentitiesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDocumentAccess().getBaseentitiesBaseEntityParserRuleCall_3_0()); }
		ruleBaseEntity
		{ after(grammarAccess.getDocumentAccess().getBaseentitiesBaseEntityParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseEntity__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBaseEntityAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getBaseEntityAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
