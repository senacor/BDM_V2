/*
 * generated by Xtext 2.25.0
 */
package com.senacor.bdm.logdsl.serializer;

import com.google.inject.Inject;
import com.senacor.bdm.logdsl.services.LogDslGrammarAccess;
import com.senacor.bdm.model.logmetamodel.Entity;
import com.senacor.bdm.model.logmetamodel.Field;
import com.senacor.bdm.model.logmetamodel.LogDocument;
import com.senacor.bdm.model.logmetamodel.LogmetamodelPackage;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class LogDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LogDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LogmetamodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LogmetamodelPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case LogmetamodelPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case LogmetamodelPackage.LOG_DOCUMENT:
				sequence_LogDocument(context, (LogDocument) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     member returns Entity
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=ID fields+=Field fields+=Field*)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     member returns Field
	 *     Field returns Field
	 *
	 * Constraint:
	 *     (name=ID dtype=DataTypes)
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LogmetamodelPackage.Literals.INAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LogmetamodelPackage.Literals.INAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, LogmetamodelPackage.Literals.FIELD__DTYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LogmetamodelPackage.Literals.FIELD__DTYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFieldAccess().getDtypeDataTypesEnumRuleCall_1_0(), semanticObject.getDtype());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LogDocument returns LogDocument
	 *
	 * Constraint:
	 *     (name=QualifiedName member+=member*)
	 */
	protected void sequence_LogDocument(ISerializationContext context, LogDocument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
