/*
 * generated by Xtext 2.25.0
 */
grammar InternalLogDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.senacor.bdm.logdsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.senacor.bdm.logdsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.senacor.bdm.logdsl.services.LogDslGrammarAccess;

}

@parser::members {

 	private LogDslGrammarAccess grammarAccess;

    public InternalLogDslParser(TokenStream input, LogDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "LogDocument";
   	}

   	@Override
   	protected LogDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleLogDocument
entryRuleLogDocument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogDocumentRule()); }
	iv_ruleLogDocument=ruleLogDocument
	{ $current=$iv_ruleLogDocument.current; }
	EOF;

// Rule LogDocument
ruleLogDocument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLogDocumentAccess().getLogDocumentAction_0(),
					$current);
			}
		)
		otherlv_1='package'
		{
			newLeafNode(otherlv_1, grammarAccess.getLogDocumentAccess().getPackageKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLogDocumentAccess().getNameQualifiedNameParserRuleCall_2_0());
				}
				lv_name_2_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogDocumentRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"com.senacor.bdm.logdsl.LogDsl.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLogDocumentAccess().getMemberMemberParserRuleCall_3_0());
				}
				lv_member_3_0=rulemember
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogDocumentRule());
					}
					add(
						$current,
						"member",
						lv_member_3_0,
						"com.senacor.bdm.logdsl.LogDsl.member");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRulemember
entryRulemember returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMemberRule()); }
	iv_rulemember=rulemember
	{ $current=$iv_rulemember.current; }
	EOF;

// Rule member
rulemember returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMemberAccess().getEntityParserRuleCall_0());
		}
		this_Entity_0=ruleEntity
		{
			$current = $this_Entity_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMemberAccess().getFieldParserRuleCall_1());
		}
		this_Field_1=ruleField
		{
			$current = $this_Field_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	iv_ruleEntity=ruleEntity
	{ $current=$iv_ruleEntity.current; }
	EOF;

// Rule Entity
ruleEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Entity'
		{
			newLeafNode(otherlv_0, grammarAccess.getEntityAccess().getEntityKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntityRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"com.senacor.bdm.logdsl.LogDsl.ID");
				}
			)
		)
		otherlv_2='Fields'
		{
			newLeafNode(otherlv_2, grammarAccess.getEntityAccess().getFieldsKeyword_2());
		}
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getEntityAccess().getColonKeyword_3());
		}
		(
			otherlv_4='-'
			{
				newLeafNode(otherlv_4, grammarAccess.getEntityAccess().getHyphenMinusKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEntityAccess().getFieldsFieldParserRuleCall_4_1_0());
					}
					lv_fields_5_0=ruleField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEntityRule());
						}
						add(
							$current,
							"fields",
							lv_fields_5_0,
							"com.senacor.bdm.logdsl.LogDsl.Field");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6='-'
				{
					newLeafNode(otherlv_6, grammarAccess.getEntityAccess().getHyphenMinusKeyword_4_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getEntityAccess().getFieldsFieldParserRuleCall_4_2_1_0());
						}
						lv_fields_7_0=ruleField
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEntityRule());
							}
							add(
								$current,
								"fields",
								lv_fields_7_0,
								"com.senacor.bdm.logdsl.LogDsl.Field");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"com.senacor.bdm.logdsl.LogDsl.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldAccess().getDtypeDataTypesEnumRuleCall_1_0());
				}
				lv_dtype_1_0=ruleDataTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldRule());
					}
					set(
						$current,
						"dtype",
						lv_dtype_1_0,
						"com.senacor.bdm.logdsl.LogDsl.DataTypes");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_ID_0=RULE_ID
			{
				$current.merge(this_ID_0);
			}
			{
				newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0_0());
			}
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_0_1());
			}
		)*
		this_ID_2=RULE_ID
		{
			$current.merge(this_ID_2);
		}
		{
			newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Rule DataTypes
ruleDataTypes returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='String'
			{
				$current = grammarAccess.getDataTypesAccess().getStringEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDataTypesAccess().getStringEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Number'
			{
				$current = grammarAccess.getDataTypesAccess().getNumberEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDataTypesAccess().getNumberEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
