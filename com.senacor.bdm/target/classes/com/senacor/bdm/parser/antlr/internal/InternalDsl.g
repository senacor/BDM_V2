/*
 * generated by Xtext 2.25.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.senacor.bdm.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.senacor.bdm.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.senacor.bdm.services.DslGrammarAccess;

}

@parser::members {

 	private DslGrammarAccess grammarAccess;

    public InternalDslParser(TokenStream input, DslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "LogDocument";
   	}

   	@Override
   	protected DslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleLogDocument
entryRuleLogDocument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogDocumentRule()); }
	iv_ruleLogDocument=ruleLogDocument
	{ $current=$iv_ruleLogDocument.current; }
	EOF;

// Rule LogDocument
ruleLogDocument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLogDocumentAccess().getLogDocumentAction_0(),
					$current);
			}
		)
		otherlv_1='package'
		{
			newLeafNode(otherlv_1, grammarAccess.getLogDocumentAccess().getPackageKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLogDocumentAccess().getNameQualifiedNameParserRuleCall_2_0());
				}
				lv_name_2_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogDocumentRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"com.senacor.bdm.Dsl.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLogDocumentAccess().getMembersMemberParserRuleCall_3_0());
				}
				lv_members_3_0=ruleMember
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogDocumentRule());
					}
					add(
						$current,
						"members",
						lv_members_3_0,
						"com.senacor.bdm.Dsl.Member");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMember
entryRuleMember returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMemberRule()); }
	iv_ruleMember=ruleMember
	{ $current=$iv_ruleMember.current; }
	EOF;

// Rule Member
ruleMember returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMemberAccess().getBaseEntityParserRuleCall_0());
		}
		this_BaseEntity_0=ruleBaseEntity
		{
			$current = $this_BaseEntity_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMemberAccess().getFieldDeclarationParserRuleCall_1());
		}
		this_FieldDeclaration_1=ruleFieldDeclaration
		{
			$current = $this_FieldDeclaration_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMemberAccess().getExtensionSateliteParserRuleCall_2());
		}
		this_ExtensionSatelite_2=ruleExtensionSatelite
		{
			$current = $this_ExtensionSatelite_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBaseEntity
entryRuleBaseEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBaseEntityRule()); }
	iv_ruleBaseEntity=ruleBaseEntity
	{ $current=$iv_ruleBaseEntity.current; }
	EOF;

// Rule BaseEntity
ruleBaseEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBaseEntityAccess().getBaseEntityAction_0(),
					$current);
			}
		)
		otherlv_1='BaseEntity'
		{
			newLeafNode(otherlv_1, grammarAccess.getBaseEntityAccess().getBaseEntityKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getBaseEntityAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBaseEntityRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"com.senacor.bdm.Dsl.ID");
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getBaseEntityAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBaseEntityAccess().getFielddeclarationsFieldDeclarationParserRuleCall_4_0());
				}
				lv_fielddeclarations_4_0=ruleFieldDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBaseEntityRule());
					}
					add(
						$current,
						"fielddeclarations",
						lv_fielddeclarations_4_0,
						"com.senacor.bdm.Dsl.FieldDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getBaseEntityAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleExtensionSatelite
entryRuleExtensionSatelite returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtensionSateliteRule()); }
	iv_ruleExtensionSatelite=ruleExtensionSatelite
	{ $current=$iv_ruleExtensionSatelite.current; }
	EOF;

// Rule ExtensionSatelite
ruleExtensionSatelite returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExtensionSateliteAccess().getExtensionSateliteAction_0(),
					$current);
			}
		)
		otherlv_1='ExtensionSatelite'
		{
			newLeafNode(otherlv_1, grammarAccess.getExtensionSateliteAccess().getExtensionSateliteKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getExtensionSateliteAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExtensionSateliteRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"com.senacor.bdm.Dsl.ID");
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getExtensionSateliteAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExtensionSateliteAccess().getFielddeclarationsFieldDeclarationParserRuleCall_4_0());
				}
				lv_fielddeclarations_4_0=ruleFieldDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtensionSateliteRule());
					}
					add(
						$current,
						"fielddeclarations",
						lv_fielddeclarations_4_0,
						"com.senacor.bdm.Dsl.FieldDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getExtensionSateliteAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleFieldDeclaration
entryRuleFieldDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldDeclarationRule()); }
	iv_ruleFieldDeclaration=ruleFieldDeclaration
	{ $current=$iv_ruleFieldDeclaration.current; }
	EOF;

// Rule FieldDeclaration
ruleFieldDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getFieldDeclarationAccess().getFieldParserRuleCall());
	}
	this_Field_0=ruleField
	{
		$current = $this_Field_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFieldAccess().getFieldAction_0(),
					$current);
			}
		)
		otherlv_1='Feld'
		{
			newLeafNode(otherlv_1, grammarAccess.getFieldAccess().getFeldKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"com.senacor.bdm.Dsl.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_ID_0=RULE_ID
			{
				$current.merge(this_ID_0);
			}
			{
				newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0_0());
			}
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_0_1());
			}
		)*
		this_ID_2=RULE_ID
		{
			$current.merge(this_ID_2);
		}
		{
			newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
