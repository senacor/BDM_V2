/*
 * generated by Xtext 2.25.0
 */
package com.senacor.bdm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class LogDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.senacor.bdm.Dsl.LogDocument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogDocumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMembersMemberParserRuleCall_3_0 = (RuleCall)cMembersAssignment_3.eContents().get(0);
		
		//LogDocument:
		//    {LogDocument}
		//    'package' name=QualifiedName
		//    members+=Member;
		@Override public ParserRule getRule() { return rule; }
		
		//{LogDocument}
		//'package' name=QualifiedName
		//members+=Member
		public Group getGroup() { return cGroup; }
		
		//{LogDocument}
		public Action getLogDocumentAction_0() { return cLogDocumentAction_0; }
		
		//'package'
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//members+=Member
		public Assignment getMembersAssignment_3() { return cMembersAssignment_3; }
		
		//Member
		public RuleCall getMembersMemberParserRuleCall_3_0() { return cMembersMemberParserRuleCall_3_0; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.senacor.bdm.Dsl.Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBaseEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFieldDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExtensionSateliteParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Member returns Member:
		//    BaseEntity|FieldDeclaration|ExtensionSatelite
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BaseEntity|FieldDeclaration|ExtensionSatelite
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BaseEntity
		public RuleCall getBaseEntityParserRuleCall_0() { return cBaseEntityParserRuleCall_0; }
		
		//FieldDeclaration
		public RuleCall getFieldDeclarationParserRuleCall_1() { return cFieldDeclarationParserRuleCall_1; }
		
		//ExtensionSatelite
		public RuleCall getExtensionSateliteParserRuleCall_2() { return cExtensionSateliteParserRuleCall_2; }
	}
	public class BaseEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.senacor.bdm.Dsl.BaseEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBaseEntityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBaseEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFielddeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFielddeclarationsFieldDeclarationParserRuleCall_4_0 = (RuleCall)cFielddeclarationsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BaseEntity:
		//    {BaseEntity}
		//    'BaseEntity' name=ID '{'
		//    fielddeclarations+=FieldDeclaration
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{BaseEntity}
		//'BaseEntity' name=ID '{'
		//fielddeclarations+=FieldDeclaration
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{BaseEntity}
		public Action getBaseEntityAction_0() { return cBaseEntityAction_0; }
		
		//'BaseEntity'
		public Keyword getBaseEntityKeyword_1() { return cBaseEntityKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//fielddeclarations+=FieldDeclaration
		public Assignment getFielddeclarationsAssignment_4() { return cFielddeclarationsAssignment_4; }
		
		//FieldDeclaration
		public RuleCall getFielddeclarationsFieldDeclarationParserRuleCall_4_0() { return cFielddeclarationsFieldDeclarationParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ExtensionSateliteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.senacor.bdm.Dsl.ExtensionSatelite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExtensionSateliteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExtensionSateliteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFielddeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFielddeclarationsFieldDeclarationParserRuleCall_4_0 = (RuleCall)cFielddeclarationsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ExtensionSatelite returns ExtensionSatelite:
		//    {ExtensionSatelite}
		//    'ExtensionSatelite' name=ID '{'
		//    fielddeclarations+=FieldDeclaration
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExtensionSatelite}
		//'ExtensionSatelite' name=ID '{'
		//fielddeclarations+=FieldDeclaration
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{ExtensionSatelite}
		public Action getExtensionSateliteAction_0() { return cExtensionSateliteAction_0; }
		
		//'ExtensionSatelite'
		public Keyword getExtensionSateliteKeyword_1() { return cExtensionSateliteKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//fielddeclarations+=FieldDeclaration
		public Assignment getFielddeclarationsAssignment_4() { return cFielddeclarationsAssignment_4; }
		
		//FieldDeclaration
		public RuleCall getFielddeclarationsFieldDeclarationParserRuleCall_4_0() { return cFielddeclarationsFieldDeclarationParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FieldDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.senacor.bdm.Dsl.FieldDeclaration");
		private final RuleCall cFieldParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FieldDeclaration returns FieldDeclaration:
		//    Field
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Field
		public RuleCall getFieldParserRuleCall() { return cFieldParserRuleCall; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.senacor.bdm.Dsl.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFieldAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFeldKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Field returns Field:
		//    {Field}
		//    'Feld' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Field}
		//'Feld' name=ID
		public Group getGroup() { return cGroup; }
		
		//{Field}
		public Action getFieldAction_0() { return cFieldAction_0; }
		
		//'Feld'
		public Keyword getFeldKeyword_1() { return cFeldKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.senacor.bdm.Dsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//QualifiedName:
		//    (ID '.')* ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID '.')* ID
		public Group getGroup() { return cGroup; }
		
		//(ID '.')*
		public Group getGroup_0() { return cGroup_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.senacor.bdm.Dsl.EString");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.senacor.bdm.Dsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.senacor.bdm.Dsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	private final LogDocumentElements pLogDocument;
	private final MemberElements pMember;
	private final BaseEntityElements pBaseEntity;
	private final ExtensionSateliteElements pExtensionSatelite;
	private final FieldDeclarationElements pFieldDeclaration;
	private final FieldElements pField;
	private final QualifiedNameElements pQualifiedName;
	private final EStringElements pEString;
	private final TerminalRule tID;
	private final EIntElements pEInt;
	private final EBooleanElements pEBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLogDocument = new LogDocumentElements();
		this.pMember = new MemberElements();
		this.pBaseEntity = new BaseEntityElements();
		this.pExtensionSatelite = new ExtensionSateliteElements();
		this.pFieldDeclaration = new FieldDeclarationElements();
		this.pField = new FieldElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pEString = new EStringElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.senacor.bdm.Dsl.ID");
		this.pEInt = new EIntElements();
		this.pEBoolean = new EBooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.senacor.bdm.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//LogDocument:
	//    {LogDocument}
	//    'package' name=QualifiedName
	//    members+=Member;
	public LogDocumentElements getLogDocumentAccess() {
		return pLogDocument;
	}
	
	public ParserRule getLogDocumentRule() {
		return getLogDocumentAccess().getRule();
	}
	
	//Member returns Member:
	//    BaseEntity|FieldDeclaration|ExtensionSatelite
	//;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//BaseEntity:
	//    {BaseEntity}
	//    'BaseEntity' name=ID '{'
	//    fielddeclarations+=FieldDeclaration
	//    '}'
	//    ;
	public BaseEntityElements getBaseEntityAccess() {
		return pBaseEntity;
	}
	
	public ParserRule getBaseEntityRule() {
		return getBaseEntityAccess().getRule();
	}
	
	//ExtensionSatelite returns ExtensionSatelite:
	//    {ExtensionSatelite}
	//    'ExtensionSatelite' name=ID '{'
	//    fielddeclarations+=FieldDeclaration
	//    '}'
	//;
	public ExtensionSateliteElements getExtensionSateliteAccess() {
		return pExtensionSatelite;
	}
	
	public ParserRule getExtensionSateliteRule() {
		return getExtensionSateliteAccess().getRule();
	}
	
	//FieldDeclaration returns FieldDeclaration:
	//    Field
	//;
	public FieldDeclarationElements getFieldDeclarationAccess() {
		return pFieldDeclaration;
	}
	
	public ParserRule getFieldDeclarationRule() {
		return getFieldDeclarationAccess().getRule();
	}
	
	//Field returns Field:
	//    {Field}
	//    'Feld' name=ID
	//;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//QualifiedName:
	//    (ID '.')* ID
	//;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//@Override
	//terminal ID:
	//    '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
	////    '^'?('a'..'z'|'A'..'Z'|'_'|'�'|'�'|'�'|'�'|'�'|'�') ('a'..'z'|'A'..'Z'|'�'|'�'|'�'|'�'|'�'|'�'|'�'|'_'|'0'..'9')*
	//;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
